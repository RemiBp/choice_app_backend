/**
 * Script de test pour acc√©der directement √† MongoDB et v√©rifier la connexion
 * Se concentre sur la recherche du restaurant Olivia et l'affichage de sa structure compl√®te
 */

const { MongoClient } = require('mongodb');
const path = require('path'); // Import path module
require('dotenv').config({ path: path.resolve(__dirname, '.env') }); // Explicitly set path to current directory .env

// V√©rification de la variable d'environnement MONGO_URI
if (!process.env.MONGO_URI) {
  console.error('‚ùå La variable MONGO_URI est manquante dans le fichier .env');
  process.exit(1);
}

// Configuration de la connexion MongoDB
const mongoURI = process.env.MONGO_URI;
const dbName = 'Restauration_Officielle';
const collectionName = 'producers';

// Connexion √† MongoDB et recherche du restaurant Olivia
async function testMongoConnection() {
  let client;

  try {
    console.log('üìä TEST DE CONNEXION DIRECTE √Ä MONGODB');
    console.log('======================================');
    console.log(`üîå Connexion √† MongoDB: ${mongoURI.split('@')[1]}`);
    
    // Connexion √† MongoDB
    client = new MongoClient(mongoURI);
    await client.connect();
    console.log('‚úÖ Connexion √† MongoDB r√©ussie!');
    
    // Acc√©der √† la base de donn√©es et √† la collection
    const db = client.db(dbName);
    const collection = db.collection(collectionName);
    
    // Liste des bases de donn√©es disponibles
    const dbs = await client.db().admin().listDatabases();
    console.log('\nüìÅ BASES DE DONN√âES DISPONIBLES:');
    dbs.databases.forEach(db => {
      console.log(`- ${db.name} (${db.sizeOnDisk / (1024 * 1024)} MB)`);
    });
    
    // Compter le nombre de documents dans la collection
    const count = await collection.countDocuments();
    console.log(`\nüìä COLLECTION "${collectionName}": ${count} documents`);
    
    // Rechercher le restaurant Olivia
    const olivia = await collection.findOne({ name: 'Olivia' });
    
    if (olivia) {
      console.log('\n‚úÖ RESTAURANT OLIVIA TROUV√â:');
      // Afficher la structure compl√®te du document Olivia
      console.log(JSON.stringify(olivia, null, 2));
    } else {
      console.log('\n‚ùå Restaurant Olivia non trouv√© dans la base de donn√©es');
    }
    
    return true;
  } catch (error) {
    console.error('\n‚ùå ERREUR DE CONNEXION MongoDB:', error);
    return false;
  } finally {
    if (client) {
      await client.close();
      console.log('\nüîí Connexion MongoDB ferm√©e');
    }
  }
}

// Ex√©cuter le test
testMongoConnection()
  .then(success => {
    if (success) {
      console.log('\n‚úÖ TEST R√âUSSI: Connexion √† MongoDB et recherche d\'Olivia');
    } else {
      console.error('\n‚ùå TEST √âCHOU√â: Probl√®me de connexion √† MongoDB');
      process.exit(1);
    }
  })
  .catch(error => {
    console.error('\n‚ùå ERREUR FATALE:', error);
    process.exit(1);
  });