require('dotenv').config();

const mongoose = require('mongoose');
const modelRegistry = require('../models/index');

// Stockage des connexions sp√©cifiques une fois cr√©√©es
let choiceAppConnectionInstance = null;
let restoConnectionInstance = null;
let loisirsConnectionInstance = null;
let beautyConnectionInstance = null;

// Configuration des connexions √† la base de donn√©es
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017';
const DB_NAME = process.env.DB_NAME || 'Restauration_Officielle';

console.log('üîå Connexion √† MongoDB avec URI:', MONGO_URI);
console.log('üìä Base de donn√©es principale:', DB_NAME);

// Configurer mongoose globalement
mongoose.set('strictQuery', false);

// Fonction pour √©tablir la connexion principale
const connectToMongoDB = async () => {
  try {
    console.log('üîÑ Tentative de connexion √† MongoDB...');
    
    // Connexion directe via mongoose par d√©faut
    await mongoose.connect(MONGO_URI, {
      serverSelectionTimeoutMS: 30000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 30000,
      maxPoolSize: 10,
      maxIdleTimeMS: 10000,
      family: 4, 
      autoIndex: false,
      bufferCommands: false,
    });
    
    console.log('‚úÖ Connexion √† MongoDB √©tablie avec succ√®s');
    
    mongoose.connection.removeAllListeners('error');
    mongoose.connection.removeAllListeners('disconnected');

    mongoose.connection.on('error', (err) => {
      console.error('‚ùå Erreur MongoDB apr√®s connexion √©tablie:', err);
    });
    
    mongoose.connection.on('disconnected', () => {
      console.log('üò¢ D√©connect√© de MongoDB');
      setTimeout(connectToMongoDB, 5000);
    });
    
    // Apr√®s une connexion r√©ussie, r√©initialiser les instances stock√©es
    choiceAppConnectionInstance = null;
    restoConnectionInstance = null;
    loisirsConnectionInstance = null;
    beautyConnectionInstance = null;
    
    return mongoose.connection;
  } catch (error) {
    console.error('‚ùå Erreur initiale lors de la connexion √† MongoDB:', error.message);
    if (error.reason) {
        console.error('   Reason:', error.reason);
    }
    console.error('   Tentative de reconnexion dans 5 secondes...');
    setTimeout(connectToMongoDB, 5000);
    return null; 
  }
};

// Acc√®s aux connexions sp√©cifiques des bases de donn√©es (MODIFI√â)
const getChoiceAppConnection = () => {
  if (!choiceAppConnectionInstance && mongoose.connection.readyState === 1) {
    console.log('üîå Cr√©ation/Stockage de l\'instance de connexion choice_app');
    choiceAppConnectionInstance = mongoose.connection.useDb('choice_app');
  }
  return choiceAppConnectionInstance;
};
const getRestoConnection = () => {
  if (!restoConnectionInstance && mongoose.connection.readyState === 1) {
    console.log('üîå Cr√©ation/Stockage de l\'instance de connexion Restauration_Officielle');
    restoConnectionInstance = mongoose.connection.useDb('Restauration_Officielle');
  }
  return restoConnectionInstance;
};
const getLoisirsConnection = () => {
  if (!loisirsConnectionInstance && mongoose.connection.readyState === 1) {
    console.log('üîå Cr√©ation/Stockage de l\'instance de connexion Loisir&Culture');
    loisirsConnectionInstance = mongoose.connection.useDb('Loisir&Culture');
  }
  return loisirsConnectionInstance;
};
const getBeautyConnection = () => {
  if (!beautyConnectionInstance && mongoose.connection.readyState === 1) {
    console.log('üîå Cr√©ation/Stockage de l\'instance de connexion Beauty_Wellness');
    beautyConnectionInstance = mongoose.connection.useDb('Beauty_Wellness');
  }
  return beautyConnectionInstance;
};

// Fonction d'initialisation des mod√®les (utilise les getters modifi√©s)
const initializeModels = async () => {
  console.log('üöÄ Initialisation des mod√®les MongoDB...');
  
  try {
    if (mongoose.connection.readyState !== 1) {
      console.log('‚ö†Ô∏è Mongoose n est pas connect√©, tentative de connexion...');
      const connection = await connectToMongoDB();
      if (!connection || connection.readyState !== 1) {
          console.error('‚ùå √âchec de la connexion initiale √† MongoDB. L initialisation des mod√®les ne peut pas continuer.');
          return false;
      }
    }
    
    const connections = {
      choiceAppDb: getChoiceAppConnection(),
      restaurationDb: getRestoConnection(),
      loisirDb: getLoisirsConnection(),
      beautyWellnessDb: getBeautyConnection(),
    };
    
    const { models } = modelRegistry.initialize(connections);
    
    global.models = models;
    
    console.log('‚úÖ Tous les mod√®les ont √©t√© initialis√©s');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l initialisation des mod√®les:', error);
    return false;
  }
};

// Exporter les connexions et les fonctions
module.exports = {
  connectToMongoDB,
  getChoiceAppConnection,
  getRestoConnection,
  getLoisirsConnection,
  getBeautyConnection,
  initializeModels,
  choiceAppConnection: getChoiceAppConnection,
  restaurationConnection: getRestoConnection,
  loisirsConnection: getLoisirsConnection,
  beautyWellnessConnection: getBeautyConnection,
}; 