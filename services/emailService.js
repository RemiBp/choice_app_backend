const nodemailer = require('nodemailer');
const sgMail = require('@sendgrid/mail');
const dotenv = require('dotenv');
const mongoose = require('mongoose');
const { choiceAppDb } = require('../index');
const EmailLog = require('../models/EmailLog');

dotenv.config();

// Configuration de SendGrid
const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;
if (!SENDGRID_API_KEY) {
  console.warn('‚ö†Ô∏è ATTENTION: Cl√© API SendGrid manquante - Le service d\'emails sera limit√©');
} else {
  sgMail.setApiKey(SENDGRID_API_KEY);
  console.log('‚úÖ SendGrid API initialis√©e avec la cl√©:', SENDGRID_API_KEY.substring(0, 10) + '...');
}

// Configuration de Nodemailer (fallback)
let transporter = null;

// Initialiser le service d'email Nodemailer (fallback)
const initializeNodemailer = () => {
  try {
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS || !process.env.SMTP_HOST || !process.env.SMTP_PORT) {
      console.warn('‚ö†Ô∏è Configuration Nodemailer incompl√®te. Ce service de fallback ne sera pas disponible.');
      return false;
    }

    console.log('üîß Initialisation du service Nodemailer (fallback) avec:');
    console.log(`- Host: ${process.env.SMTP_HOST}`);
    console.log(`- Port: ${process.env.SMTP_PORT}`);
    console.log(`- User: ${process.env.EMAIL_USER}`);

    // Configuration standard avec TLS d√©sactiv√© pour permettre les connexions au serveur SMTP
    transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      secure: process.env.SMTP_PORT === '465', // true pour le port 465, false pour les autres ports
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    console.log('‚úÖ Service Nodemailer initialis√© avec succ√®s (fallback)');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation du service Nodemailer:', error);
    return false;
  }
};

// Tester la connexion SMTP
const testEmailConnection = async () => {
  try {
    // V√©rifier d'abord SendGrid
    if (process.env.SENDGRID_API_KEY) {
      try {
        console.log('üîç Test de SendGrid...');
        // SendGrid n'a pas de m√©thode de v√©rification directe comme Nodemailer
        // On pr√©sume que la config est bonne si la cl√© est d√©finie
        console.log('‚úÖ Configuration SendGrid valide');
      } catch (error) {
        console.error('‚ùå Probl√®me avec la configuration SendGrid:', error);
      }
    }

    // Si SendGrid n'est pas configur√© ou √©choue, tester Nodemailer
    try {
      if (!transporter) {
        await initializeNodemailer();
      }

      if (!transporter) {
        console.error('‚ùå Impossible d\'initialiser le transporteur email');
        return false;
      }

      console.log('üîç V√©rification de la connexion SMTP Nodemailer...');
      await transporter.verify();
      console.log('‚úÖ Connexion SMTP Nodemailer r√©ussie');
      return true;
    } catch (error) {
      console.error('‚ùå √âchec de connexion SMTP Nodemailer:', error);
      return false;
    }
  } catch (timeoutError) {
    console.error('‚è±Ô∏è D√©lai d\'attente d√©pass√©. Le serveur SMTP ne r√©pond pas.');
    return false;
  }
};

// Configuration du transporteur d'emails
const createTransporter = () => {
  // V√©rifier si les variables d'environnement sont d√©finies
  if (!process.env.EMAIL_HOST || !process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    // Fallback vers un transporteur ethereal (pour le d√©veloppement)
    return nodemailer.createTransport({
      host: 'smtp.ethereal.email',
      port: 587,
      secure: false,
      auth: {
        user: 'ethereal.user@ethereal.email',
        pass: 'ethereal_pass'
      }
    });
  }

  // Cr√©er un transporteur √† partir des variables d'environnement
  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT || 587,
    secure: process.env.EMAIL_SECURE === 'true',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
};

// Envoyer un email (utilise SendGrid en priorit√©, puis Nodemailer comme fallback)
const sendEmail = async (to, subject, html, userId, type, metadata = {}) => {
  try {
    // Pr√©paration des donn√©es pour le log
    const logData = {
      userId,
      email: to,
      subject,
      content: html,
      type: type || 'notification',
      metadata
    };
    
    // Essayer d'abord avec SendGrid si configur√©
    if (process.env.SENDGRID_API_KEY) {
      const msg = {
        to,
        from: {
          email: process.env.SENDGRID_FROM_EMAIL || 'contact@choiceapp.fr',
          name: process.env.SENDGRID_FROM_NAME || 'Choice App'
        },
        subject,
        html,
      };

      try {
        console.log(`üì§ Envoi d'email via SendGrid √† ${to}...`);
        const result = await sgMail.send(msg);
        console.log('‚úÖ Email envoy√© avec succ√®s via SendGrid');
        
        // Cr√©er un log d'email r√©ussi
        await EmailLog.create({
          ...logData,
          status: 'sent',
          sendingMethod: 'sendgrid',
          messageId: result[0]?.headers['x-message-id'] || null
        });
        
        return true;
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi de l\'email via SendGrid:', error);
        console.log('‚ö†Ô∏è Tentative d\'envoi via Nodemailer (fallback)...');
      }
    }

    // Fallback √† Nodemailer
    try {
      if (!transporter) {
        if (!initializeNodemailer()) {
          console.warn('‚ö†Ô∏è Service Nodemailer non disponible. Email non envoy√©.');
          
          // Cr√©er un log d'√©chec
          await EmailLog.create({
            ...logData,
            status: 'failed',
            error: 'Service Nodemailer non disponible',
            sendingMethod: 'nodemailer'
          });
          
          return false;
        }
      }

      const mailOptions = {
        from: `"Choice App" <${process.env.EMAIL_USER}>`,
        to,
        subject,
        html
      };

      console.log(`üì§ Envoi d'email via Nodemailer √† ${to}...`);
      const info = await transporter.sendMail(mailOptions);
      console.log('‚úÖ Email envoy√© avec succ√®s via Nodemailer:', info.messageId);
      
      // Cr√©er un log d'email r√©ussi
      await EmailLog.create({
        ...logData,
        status: 'sent',
        sendingMethod: 'nodemailer',
        messageId: info.messageId
      });
      
      return true;
    } catch (nodemailerError) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email via Nodemailer:', nodemailerError);
      
      // Cr√©er un log d'erreur
      await EmailLog.create({
        ...logData,
        status: 'error',
        error: nodemailerError.message,
        sendingMethod: 'nodemailer'
      });
      
      return false;
    }
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors de l\'envoi de l\'email:', error);
    
    // Tenter de logger l'erreur, mais ne pas propager d'erreur si cela √©choue
    try {
      await EmailLog.create({
        userId: userId || 'system',
        email: to,
        type: type || 'notification',
        subject,
        content: html,
        status: 'error',
        error: error.message
      });
    } catch (logError) {
      console.error('‚ö†Ô∏è Impossible de logger l\'erreur d\'email:', logError);
    }
    
    return false;
  }
};

// Email de confirmation d'inscription
const sendConfirmationEmail = async (email, name, userId) => {
  const subject = 'Bienvenue sur Choice App - Confirmez votre inscription';
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #eee; border-radius: 5px;">
      <h2 style="color: #7b68ee; text-align: center;">Bienvenue sur Choice App!</h2>
      <p>Bonjour ${name || 'cher utilisateur'},</p>
      <p>Merci de vous √™tre inscrit √† Choice App. Nous sommes ravis de vous compter parmi notre communaut√©!</p>
      <p>Votre inscription a √©t√© confirm√©e et votre compte est maintenant actif.</p>
      <p>Si vous avez des questions ou besoin d'assistance, n'h√©sitez pas √† nous contacter √† support@choiceapp.fr.</p>
      <p>√Ä bient√¥t sur Choice App!</p>
      <div style="margin-top: 30px; text-align: center; color: #888; font-size: 12px;">
        <p>Cet email a √©t√© envoy√© automatiquement. Merci de ne pas y r√©pondre.</p>
      </div>
    </div>
  `;
  
  return await sendEmail(email, subject, html, userId, 'confirmation');
};

// Email de bienvenue
const sendWelcomeEmail = async (email, name, userId) => {
  const subject = 'Bienvenue sur Choice App !';
  const html = `
    <h1>Bienvenue sur Choice App, ${name} !</h1>
    <p>Nous sommes ravis de vous compter parmi nos utilisateurs.</p>
    <p>Commencez d√®s maintenant √† d√©couvrir des lieux int√©ressants autour de vous !</p>
    <br>
    <p>L'√©quipe Choice App</p>
  `;
  
  return sendEmail(email, subject, html, userId, 'welcome');
};

// Email de r√©cup√©ration de mot de passe
const sendPasswordResetEmail = async (email, resetUrl, name, userId) => {
  const subject = 'R√©initialisation de votre mot de passe Choice App';
  const html = `
    <h1>R√©initialisation de mot de passe</h1>
    <p>Bonjour ${name},</p>
    <p>Vous avez demand√© une r√©initialisation de mot de passe pour votre compte Choice App.</p>
    <p>Cliquez sur le lien ci-dessous pour r√©initialiser votre mot de passe. Ce lien est valable pendant 1 heure.</p>
    <p><a href="${resetUrl}" style="padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">R√©initialiser mon mot de passe</a></p>
    <p>Si vous n'avez pas demand√© cette r√©initialisation, vous pouvez ignorer cet email.</p>
    <br>
    <p>L'√©quipe Choice App</p>
  `;
  
  return sendEmail(email, subject, html, userId, 'password_reset', { resetUrl });
};

// Email de confirmation d'email
const sendVerificationEmail = async (email, verificationUrl, name, userId) => {
  const subject = 'V√©rification de votre email Choice App';
  const html = `
    <h1>V√©rification de votre adresse email</h1>
    <p>Bonjour ${name},</p>
    <p>Merci de vous √™tre inscrit sur Choice App. Veuillez v√©rifier votre adresse email en cliquant sur le lien ci-dessous.</p>
    <p><a href="${verificationUrl}" style="padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">V√©rifier mon email</a></p>
    <br>
    <p>L'√©quipe Choice App</p>
  `;
  
  return sendEmail(email, subject, html, userId, 'verification', { verificationUrl });
};

// Email de notification (nouveau message, etc.)
const sendNotificationEmail = async (email, subject, message, name, userId, type = 'notification') => {
  const html = `
    <h1>${subject}</h1>
    <p>Bonjour ${name},</p>
    <p>${message}</p>
    <p><a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}" style="padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">Voir sur Choice App</a></p>
    <br>
    <p>L'√©quipe Choice App</p>
  `;
  
  return sendEmail(email, subject, html, userId, type);
};

// Initialisation
const initialize = async () => {
  console.log('üìß Initialisation du service email...');
  console.log('üìß Service principal: SendGrid');
  // Tester la connexion SendGrid
  console.log('üîç Test de la connexion SendGrid...');
  await testEmailConnection();
};

// Initialiser le service au d√©marrage si en production
if (process.env.NODE_ENV === 'production') {
  initialize().catch(console.error);
}

module.exports = {
  sendEmail,
  sendWelcomeEmail,
  sendPasswordResetEmail,
  sendVerificationEmail,
  sendNotificationEmail,
  sendConfirmationEmail,
  testEmailConnection,
  initialize
}; 