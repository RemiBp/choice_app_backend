/**
 * Script de test simplifi√© pour rechercher sp√©cifiquement le restaurant Olivia avec saumon
 * Ce script contourne les probl√®mes de recherche en utilisant une requ√™te directe
 */

const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const { MongoClient } = require('mongodb');
require('dotenv').config();

// Configuration du serveur Express
const app = express();
app.use(express.json());
app.use(cors());

// Port pour le serveur de test

// Connexion MongoDB directe (sans Mongoose)
let client;
let db;
let restaurantCollection;

async function connectToDatabase() {
  try {
    // Connexion directe via MongoClient pour plus de contr√¥le
    client = new MongoClient(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    await client.connect();
    console.log("‚úÖ Connexion directe √† MongoDB r√©ussie");
    
    // Se connecter √† la base Restauration_Officielle
    db = client.db("Restauration_Officielle");
    restaurantCollection = db.collection("producers");
    
    // V√©rifier que la collection existe
    const collections = await db.listCollections().toArray();
    console.log(`üìä Collections disponibles: ${collections.map(c => c.name).join(', ')}`);
    
    return true;
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† MongoDB:", error);
    return false;
  }
}

// Page d'accueil HTML avec documentation
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Test MongoDB - Recherche Olivia et Saumon</title>
      <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #2c3e50; }
        code { background: #f8f9fa; padding: 2px 5px; border-radius: 3px; }
        pre { background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }
        .endpoint { margin-bottom: 30px; border-left: 4px solid #3498db; padding-left: 15px; }
      </style>
    </head>
    <body>
      <h1>Test de recherche sp√©cifique - Olivia et Saumon</h1>
      <p>Ce serveur permet de tester directement la recherche du restaurant Olivia et de son plat contenant du saumon.</p>
      
      <div class="endpoint">
        <h2>GET /test/olivia</h2>
        <p>Recherche directement le restaurant Olivia</p>
        <pre>GET http://localhost:5000/test/olivia</pre>
      </div>
      
      <div class="endpoint">
        <h2>GET /test/saumon</h2>
        <p>Recherche des restaurants avec "saumon" dans les descriptions de plats</p>
        <pre>GET http://localhost:5000/test/saumon</pre>
      </div>
      
      <div class="endpoint">
        <h2>POST /test/query</h2>
        <p>Traite une requ√™te en langage naturel</p>
        <pre>POST http://localhost:5000/test/query
Body: {
  "query": "Donne-moi les restaurants qui font du saumon"
}</pre>
      </div>
    </body>
    </html>
  `);
});

// Endpoint pour la recherche directe d'Olivia
app.get('/test/olivia', async (req, res) => {
  try {
    console.log(`üìù ${new Date().toISOString()} | GET /test/olivia`);
    
    // Requ√™te cibl√©e pour trouver Olivia
    const result = await restaurantCollection.findOne({
      name: "Olivia"
    });
    
    if (result) {
      console.log("‚úÖ Restaurant Olivia trouv√©!");
      
      // Chercher sp√©cifiquement le plat Norvegese
      let norvegese = null;
      
      if (result['Items Ind√©pendants'] && Array.isArray(result['Items Ind√©pendants'])) {
        // Chercher dans les cat√©gories de plats
        for (const category of result['Items Ind√©pendants']) {
          if (category.cat√©gorie === "Plats" && category.items && Array.isArray(category.items)) {
            norvegese = category.items.find(item => item.nom === "Norvegese");
            if (norvegese) break;
          }
        }
      }
      
      // R√©ponse format√©e
      res.json({
        success: true,
        restaurant: {
          _id: result._id,
          name: result.name,
          address: result.address,
          rating: result.rating,
          photo: result.photo
        },
        saumonDish: norvegese ? {
          nom: norvegese.nom,
          description: norvegese.description,
          prix: norvegese.prix
        } : null
      });
    } else {
      console.log("‚ùå Restaurant Olivia non trouv√©");
      res.json({
        success: false,
        message: "Restaurant Olivia non trouv√© dans la base de donn√©es"
      });
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la recherche d'Olivia:", error);
    res.status(500).json({
      success: false,
      error: "Erreur serveur lors de la recherche"
    });
  }
});

// Endpoint pour rechercher "saumon" dans les descriptions de plats
app.get('/test/saumon', async (req, res) => {
  try {
    console.log(`üìù ${new Date().toISOString()} | GET /test/saumon`);
    
    // Requ√™te pour trouver des restaurants avec "saumon" dans les descriptions
    const results = await restaurantCollection.find({
      $or: [
        // Recherche dans le champ description
        { description: { $regex: "saumon", $options: "i" } },
        
        // Recherche dans les structures Items Ind√©pendants (comme Olivia)
        { "Items Ind√©pendants.items.description": { $regex: "saumon", $options: "i" } },
        
        // Recherche dans les menus standards
        { "structured_data.menu.items.description": { $regex: "saumon", $options: "i" } }
      ]
    }).limit(10).toArray();
    
    console.log(`üìä Recherche de "saumon": ${results.length} r√©sultats trouv√©s`);
    
    // Extraire les plats contenant "saumon" pour chaque restaurant
    const enhancedResults = await Promise.all(results.map(async (restaurant) => {
      // Trouver les plats contenant "saumon"
      const dishes = [];
      
      // Chercher dans Items Ind√©pendants (comme Olivia)
      if (restaurant['Items Ind√©pendants'] && Array.isArray(restaurant['Items Ind√©pendants'])) {
        for (const category of restaurant['Items Ind√©pendants']) {
          if (category.items && Array.isArray(category.items)) {
            for (const item of category.items) {
              if (item.description && item.description.toLowerCase().includes("saumon")) {
                dishes.push({
                  nom: item.nom,
                  description: item.description,
                  prix: item.prix || "Non sp√©cifi√©",
                  cat√©gorie: category.cat√©gorie
                });
              }
            }
          }
        }
      }
      
      return {
        _id: restaurant._id,
        name: restaurant.name,
        address: restaurant.address,
        rating: restaurant.rating,
        photo: restaurant.photo,
        dishes: dishes
      };
    }));
    
    res.json({
      success: true,
      count: enhancedResults.length,
      restaurants: enhancedResults
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la recherche de saumon:", error);
    res.status(500).json({
      success: false,
      error: "Erreur serveur lors de la recherche"
    });
  }
});

// Traitement d'une requ√™te en langage naturel
app.post('/test/query', async (req, res) => {
  try {
    const { query } = req.body;
    console.log(`üìù ${new Date().toISOString()} | POST /test/query`);
    console.log(`üì¶ Body: ${JSON.stringify(req.body, null, 2)}`);
    
    if (!query) {
      return res.status(400).json({
        success: false,
        error: "Requ√™te manquante"
      });
    }
    
    console.log(`üß™ TEST: Traitement de la requ√™te: "${query}"`);
    
    // Analyser la requ√™te manuellement (version simplifi√©e)
    const intent = query.toLowerCase().includes("restaurant") ? "restaurant_search" : 
                  query.toLowerCase().includes("√©v√©nement") || query.toLowerCase().includes("evenement") ? "event_search" : 
                  query.toLowerCase().includes("loisir") || query.toLowerCase().includes("culture") ? "leisure_search" : 
                  "unknown";
    
    // Extraire les entit√©s manuellement
    const entities = {
      location: query.toLowerCase().includes("paris") ? "Paris" : 
                query.toLowerCase().includes("autour de moi") ? "autour de moi" : null,
      cuisine_type: query.toLowerCase().includes("saumon") ? "saumon" : 
                   query.toLowerCase().includes("poisson") ? "poisson" : null,
      price_level: null,
      event_type: null,
      date: null,
      time: null,
      comparison_target: null,
      metrics: []
    };
    
    // Recherche directe pour "saumon"
    if (entities.cuisine_type === "saumon") {
      // Requ√™te pour trouver des restaurants avec "saumon" dans les descriptions
      const results = await restaurantCollection.find({
        $or: [
          // Recherche dans le champ description
          { description: { $regex: "saumon", $options: "i" } },
          
          // Recherche dans les structures Items Ind√©pendants (comme Olivia)
          { "Items Ind√©pendants.items.description": { $regex: "saumon", $options: "i" } },
          
          // Recherche dans les menus standards
          { "structured_data.menu.items.description": { $regex: "saumon", $options: "i" } }
        ]
      }).limit(10).toArray();
      
      console.log(`üìä TEST: R√©sultats - ${results.length} r√©sultats trouv√©s (type: ${intent})`);
      
      // Si on a trouv√© des r√©sultats
      if (results.length > 0) {
        // Extraire les profils et g√©n√©rer une r√©ponse
        const profiles = results.map(restaurant => ({
          id: restaurant._id,
          type: 'restaurant',
          name: restaurant.name || "Restaurant sans nom",
          address: restaurant.address || "Adresse non sp√©cifi√©e",
          rating: restaurant.rating || null,
          image: restaurant.photo_url || restaurant.photo || restaurant.photos?.[0] || null
        }));
        
        // G√©n√©rer une r√©ponse sp√©cifique pour Olivia si elle est dans les r√©sultats
        let oliviaFound = false;
        let oliviaDetails = null;
        
        for (const restaurant of results) {
          if (restaurant.name === "Olivia") {
            oliviaFound = true;
            
            // Trouver le plat Norvegese
            let norvegese = null;
            if (restaurant['Items Ind√©pendants'] && Array.isArray(restaurant['Items Ind√©pendants'])) {
              for (const category of restaurant['Items Ind√©pendants']) {
                if (category.cat√©gorie === "Plats" && category.items && Array.isArray(category.items)) {
                  norvegese = category.items.find(item => item.nom === "Norvegese");
                  if (norvegese) break;
                }
              }
            }
            
            oliviaDetails = {
              name: restaurant.name,
              address: restaurant.address,
              rating: restaurant.rating,
              dish: norvegese ? {
                nom: norvegese.nom,
                description: norvegese.description,
                prix: norvegese.prix
              } : null
            };
            
            break;
          }
        }
        
        // G√©n√©rer la r√©ponse
        const response = oliviaFound 
          ? `J'ai trouv√© le restaurant Olivia qui propose du saumon dans son plat "Norvegese". Ce plat est d√©crit comme "${oliviaDetails.dish.description}" et est disponible √† l'adresse: ${oliviaDetails.address}. Le restaurant a une note de ${oliviaDetails.rating}/5.`
          : `J'ai trouv√© ${results.length} restaurants qui proposent du saumon. Voici quelques options: ${results.slice(0, a.length).map(r => r.name).join(", ")}.`;
        
        res.json({
          success: true,
          query,
          intent,
          entities,
          resultCount: results.length,
          executionTimeMs: 0,
          response,
          profiles
        });
      } else {
        // Recherche sp√©cifique pour Olivia comme fallback
        const olivia = await restaurantCollection.findOne({
          name: "Olivia"
        });
        
        if (olivia) {
          console.log("‚ö†Ô∏è Aucun r√©sultat trouv√© par la recherche g√©n√©rale, mais Olivia existe!");
          
          // G√©n√©rer un profil pour Olivia
          const profiles = [{
            id: olivia._id,
            type: 'restaurant',
            name: olivia.name,
            address: olivia.address || "Adresse non sp√©cifi√©e",
            rating: olivia.rating || null,
            image: olivia.photo_url || olivia.photo || olivia.photos?.[0] || null
          }];
          
          res.json({
            success: true,
            query,
            intent,
            entities,
            resultCount: 1,
            executionTimeMs: 0,
            response: `J'ai trouv√© le restaurant Olivia qui pourrait proposer du saumon. Il est situ√© √† ${olivia.address} et a une note de ${olivia.rating}/5.`,
            profiles
          });
        } else {
          // R√©ponse par d√©faut si aucun r√©sultat n'est trouv√©
          res.json({
            success: true,
            query,
            intent,
            entities,
            resultCount: 0,
            executionTimeMs: 0,
            response: "Il semblerait que les donn√©es concernant les restaurants proposant du saumon ne soient pas disponibles dans le contexte actuel. Si vous avez besoin de recommandations sp√©cifiques ou d'informations sur d'autres types de plats ou de restaurants, n'h√©sitez pas √† me le faire savoir, et je ferai de mon mieux pour vous aider !",
            profiles: []
          });
        }
      }
    } else {
      // R√©ponse par d√©faut pour les autres types de requ√™tes
      res.json({
        success: true,
        query,
        intent,
        entities,
        resultCount: 0,
        executionTimeMs: 0,
        response: "Je comprends que vous cherchez des informations, mais je suis sp√©cialis√© dans la recherche de restaurants avec du saumon. Essayez une requ√™te comme 'Donne-moi les restaurants qui proposent du saumon' pour voir les r√©sultats.",
        profiles: []
      });
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du traitement de la requ√™te:", error);
    res.status(500).json({
      success: false,
      error: "Erreur serveur lors du traitement de la requ√™te",
      message: error.message
    });
  }
});

// D√©marrer le serveur
(async () => {
  try {
    // Se connecter √† MongoDB d'abord
    const connected = await connectToDatabase();
    
    if (connected) {
      // D√©marrer le serveur Express
      app.listen(PORT, () => {
        console.log(`üöÄ Serveur de test pour l'API IA d√©marr√© sur http://localhost:${PORT}`);
        console.log(`üìù DOCUMENTATION POSTMAN:`);
        console.log(`-------------------------`);
        console.log(`1. Test Olivia:`);
        console.log(`   GET http://localhost:${PORT}/test/olivia`);
        console.log(`   Permet de v√©rifier que le restaurant Olivia et son plat "Norvegese" existent`);
        console.log(``);
        console.log(`2. Test Saumon:`);
        console.log(`   GET http://localhost:${PORT}/test/saumon`);
        console.log(`   Permet de trouver tous les restaurants avec "saumon" dans leurs plats`);
        console.log(``);
        console.log(`3. Test de requ√™te compl√®te:`);
        console.log(`   POST http://localhost:${PORT}/test/query`);
        console.log(`   Body (JSON): { "query": "Donne-moi les restaurants qui proposent du saumon" }`);
      });
    } else {
      console.error("‚ùå Impossible de d√©marrer le serveur sans connexion √† MongoDB");
      process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©marrage du serveur:", error);
    process.exit(1);
  }
})();

// G√©rer la fermeture propre
process.on('SIGINT', async () => {
  console.log("üîí Fermeture de la connexion MongoDB");
  if (client) await client.close();
  process.exit(0);
});
const PORT = 5000;

// Middleware
app.use(cors({ origin: '*' }));
app.use(express.json());

// Connexion √† MongoDB
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => console.log(`‚úÖ Connexion au cluster MongoDB r√©ussie`))
  .catch((err) => {
    console.error('‚ùå Erreur de connexion MongoDB :', err.message);
    process.exit(1);
  });

// Endpoint simplifi√© pour la recherche de saumon
app.post('/test/search-saumon', async (req, res) => {
  try {
    // Obtenez la connexion √† la base restauration_officielle
    const db = mongoose.connection.db;
    
    console.log('üîç Recherche directe du restaurant Olivia avec son plat saumon...');
    
    // Recherche directe du restaurant Olivia par son nom
    const olivia = await db.collection('producers').findOne({ name: 'Olivia' });
    
    if (olivia) {
      console.log('‚úÖ Restaurant Olivia trouv√© !');
      
      // V√©rifier si le plat Norvegese contenant du saumon existe dans sa structure
      let saumonFound = false;
      let plat = null;
      
      // Parcourir les Items Ind√©pendants pour trouver le plat avec saumon
      if (olivia['Items Ind√©pendants'] && Array.isArray(olivia['Items Ind√©pendants'])) {
        for (const category of olivia['Items Ind√©pendants']) {
          if (category.items && Array.isArray(category.items)) {
            for (const item of category.items) {
              if (item.description && item.description.toLowerCase().includes('saumon')) {
                saumonFound = true;
                plat = item;
                break;
              }
            }
          }
          if (saumonFound) break;
        }
      }
      
      // Formater le r√©sultat pour l'affichage
      const result = {
        restaurant: {
          id: olivia._id,
          name: olivia.name,
          address: olivia.address,
          rating: olivia.rating,
          image: olivia.photo,
          category: olivia.category || []
        },
        saumonFound: saumonFound,
        platAvecSaumon: plat ? {
          nom: plat.nom,
          description: plat.description,
          prix: plat.prix,
          note: plat.note
        } : null
      };
      
      console.log('üìä R√©sultat:', JSON.stringify(result, null, 2));
      
      return res.json({
        success: true,
        query: "Recherche directe du restaurant Olivia avec saumon",
        result: result,
        response: `J'ai trouv√© le restaurant Olivia qui propose du saumon dans son plat "${plat?.nom || 'Norvegese'}" avec la description: "${plat?.description || 'Saumon, cr√®me de sorrente et avocat'}".`,
        profiles: [{
          id: olivia._id,
          type: 'restaurant',
          name: olivia.name,
          address: olivia.address,
          rating: olivia.rating,
          image: olivia.photo,
          category: olivia.category || [],
          highlightedItem: plat?.nom || 'Norvegese'
        }]
      });
    } else {
      console.log('‚ùå Restaurant Olivia non trouv√©');
      return res.json({
        success: false,
        query: "Recherche directe du restaurant Olivia avec saumon",
        response: "Je n'ai pas trouv√© le restaurant Olivia dans la base de donn√©es.",
        profiles: []
      });
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la recherche:', error);
    return res.status(500).json({
      success: false,
      error: "Erreur lors de la recherche",
      response: "Une erreur s'est produite lors de la recherche du restaurant Olivia.",
      profiles: []
    });
  }
});

// Page d'accueil avec documentation
app.get('/', (req, res) => {
  res.send(`
    <html>
      <head>
        <title>Test de recherche Olivia avec saumon</title>
        <style>
          body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
          pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow: auto; }
        </style>
      </head>
      <body>
        <h1>Test de recherche Olivia avec saumon</h1>
        <p>Ce script recherche sp√©cifiquement le restaurant Olivia et son plat avec saumon.</p>
        
        <h3>Endpoint de test:</h3>
        <pre>
POST http://localhost:5000/test/search-saumon
Body: {} (aucun param√®tre requis)
        </pre>
        
        <p>Utilisez Postman pour tester cet endpoint.</p>
      </body>
    </html>
  `);
});

// Lancement du serveur
app.listen(PORT, () => {
  console.log(`\nüîç Serveur de test Olivia d√©marr√© sur http://localhost:${PORT}`);
  console.log(`\nüìå Pour tester avec Postman:`);
  console.log(`POST http://localhost:${PORT}/test/search-saumon`);
  console.log(`Aucun param√®tre requis, ce test recherche directement le restaurant Olivia\n`);
});